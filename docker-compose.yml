version: '2.4'
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./kibana:/usr/share/kibana:Z
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "    ip:\n"\
          "      - 10.212.99.5\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://${ELASTICSEARCH_IP}:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://${ELASTICSEARCH_IP}:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Creating read-only user\n";
        curl -s -XPOST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" https://${ELASTICSEARCH_IP}:9200/_security/user/viewer -H "Content-Type: application/json" --data "{\"password\": \"password\", \"roles\": [\"viewer\"]}";
        echo -ne "\nCreating Kibana management user\n";
        curl -s -XPOST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" https://${ELASTICSEARCH_IP}:9200/_security/user/kibana_editor -H "Content-Type: application/json" --data "{\"password\": \"password\", \"roles\": [\"editor\"]}";
        echo -ne "\nWaiting for Kibana to be up\n";
        until curl -s -u "kibana_editor:password" http://${KIBANA_IP}:5601/api/status | grep -q "All services are available"; do sleep 5; done;
        echo -ne "\nCreating index pattern and dashboard\n";
        curl -s -XPOST -u "kibana_editor:password" -H "kbn-xsrf: true" http://${KIBANA_IP}:5601/api/saved_objects/_import --form file=@/usr/share/kibana/index-pattern.ndjson;
        curl -s -XPOST -u "kibana_editor:password" -H "kbn-xsrf: true" http://${KIBANA_IP}:5601/api/saved_objects/_import --form file=@/usr/share/kibana/dashboard.ndjson;
        echo -ne "\nDeleting Kibana management user\n";
        curl -s -XDELETE --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" https://${ELASTICSEARCH_IP}:9200/_security/user/kibana_editor;
        echo -ne "\nAll done!\n";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    dns: 8.8.8.8
    networks:
      isolation_vlan:
        ipv4_address: ${SETUP_IP}
  coned-collector:
    build:
      context: coned-collector
      dockerfile: Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy
    env_file:
      - .credentials.env
      - .env
    volumes:
      - certs:/app/certs
    image: coned-collector:latest
    restart: always
    dns: 8.8.8.8
    networks:
      isolation_vlan:
        ipv4_address: "${COLLECTOR_IP}"
  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://${ELASTICSEARCH_IP}:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    dns: 8.8.8.8
    networks:
      isolation_vlan:
        ipv4_address: "${ELASTICSEARCH_IP}"
  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://${ELASTICSEARCH_IP}:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    dns: 8.8.8.8
    networks:
      isolation_vlan:
        ipv4_address: "${KIBANA_IP}"
  haproxy:
    build:
      context: haproxy
      dockerfile: Dockerfile
    environment:
      - "KIBANA_IP=${KIBANA_IP}"
    dns: 8.8.8.8
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0
    networks:
      isolation_vlan:
        ipv4_address: "${HA_PROXY_IP}"
volumes:
  certs:
  elasticsearch:
  kibana:
networks:
  isolation_vlan:
    name: isolation_vlan
    driver: macvlan
    driver_opts:
      parent: enp43s0f1.99
    ipam:
      config:
        - subnet: "10.212.99.0/24"
          gateway: "10.212.99.1"
    

  